% Use this editor as a MiniZinc scratch book
int: N;
int: n_PV;
int: n_wind;
int: n_project;    %project length

set of int: tint = 1..N;     %number of intervals
set of int: tsamp = 1..N+1;    %number of sample points
set of int: N_PV = 1..n_PV;    %number of PV farms
set of int: N_wind = 1..n_wind;    %number of wind farms
set of int: N_project = 1..n_project;    %number of project year 
set of int: N_el = 1..n_PV+1;
set of int: N_cap = 1..5;

float: DT;      %time difference between sample points (also, interval length) (s)
float: EL_ETA;  %conversion efficiency of the electrolyser (kgH/s/kW)
float: BAT_ETA_in;   %charging efficiency of electrochemical battery
float: BAT_ETA_out;  %discharging efficiency of electrochemical battery 
float: C_PV;    %unit cost of PV plant  $/kW
float: C_WIND;     %unit cost of wind farm $/kW
float: C_EL;     %unit cost of electrolyser $/kW
float: C_UG_STORAGE;    %unit cost of under ground hydrogen storage $/(kg of H2)
float: UG_STORAGE_CAPA_MAX;  %maximum size of underground storage $/(kg of H2)
float: C_PIPE_STORAGE;  %unit cost of storage with line packing $/(kg of H2)
float: PIPE_STORAGE_CAPA_MIN;  %minimum size of line packing $/(kg of H2)
float: C_BAT_ENERGY;    %unit cost of battery storage ($/kWh)
float: C_BAT_POWER;    % unit cost of battery power capacpity ($/kW)
float: RES_H_CAPA;       %virtual hydrogen reserve for reduced capacity factor (kg of H2)
float: PV_REF;    %power capacity of the reference PV plant (kW)
float: WIND_REF;    %power capacity of the reference wind plant (kW)

float: DIS_RATE;    %discount rate 8%
float: OM_EL;    % O&M for electrolyzer ($/kw)
float: OM_PV;    % O&M for PV ($/kN_elw)
float: OM_WIND;    % O&M for wind ($/kw)
float: OM_UG;     % O&M for underground hydrogen storage
float: crf; %capital recovery factor
float: H_total; %annual hydrogen generation kg/year
float: C_pipe; % pipe transportation cost (USD)
float: pv_max_min = 0;     %wind farm rated power (kW)
float: baseCostPV = 2091;  % Base transmission cost per unit capacity per unit distance for PV
float: baseCostwind = 1104;  % Base transmission cost per unit capacity per unit distance for wind

array[tint] of float: LOAD; %load timeseries (kg of H per hour)
array[N_PV, tint] of float: PV_REF_POUT;  %power output from the reference PV plant (kW)
array[N_wind, tint] of float: WIND_REF_POUT;  %power output from the reference wind plant (kW)

array[N_cap] of float: capexValues; 
array[N_cap] of float: capacityLevels;
array[1..4] of float: slopesTrans;
array[1..4] of float: interceptsTrans;
array[N_PV] of var float: newcapexTrans;

%array[N_PV] of float: C_PV_t;  %tranmission cost for PV (/kW)
%array[N_wind] of float: C_wind_t;  %tranmission cost for wind(/kW)
array[N_PV] of float: Area;    %Available land area
array[N_PV, N_el] of float: distancePV;  % Distance from each PV farm to each location
array[N_wind, N_el] of float: distanceWind;  % Distance from each wind farm to each location

% === VARIABLES ===
var float: wind_max;     %wind farm rated power (kW)
%float: wind_max=0;     %wind farm rated power (kW)
var float: pv_max;     %wind farm rated power (kW)
var float: el_max;     %electrolyser rated power (kW)
var float: ug_storage_capa;    %capacity of hydrogen storage cavern (kg of H2)
var float: pipe_storage_capa;  %capacity of hydrogen storage in the pipeline (kg of H2)
var float: bat_e_capa;    %energy capacity of the electrochemical battery (kWh)
var float: bat_p_max;    %power capacity of the electrochemical battery (kW)
var float: C_trans;    %transmission cost
var float: capex;
var float: lcoh; % LCOH in USD/kg
var float: FOM_PV; %USD/kW.year
var float: FOM_WIND; %USD/kW.year
var float: FOM_EL; %USD/kW.year
var float: FOM_UG; %USD/kg.year
var float: OF;

array[N_el] of var bool: electrolyserAt;  % Binary variables for electrolyser locations
array[N_PV, N_el] of var float: transCostPV;  % Auxiliary variable for PV cost calculation
array[N_wind, N_el] of var float: transCostWind;  % Auxiliary variable for wind cost calculation
array[N_PV] of var float: pv_max_array;    %an array of PV plant rated power values: nodes number of (kW)
array[N_wind] of var float: wind_max_array;    %an array of PV plant rated power values: nodes number of (kW)
array[tint] of var float: pv_pout;    %power out of PV plant (kW)
array[tint] of var float: wind_pout;     %power out of wind farm (kW)
array[tint] of var float: curtail_p;    %curtailed power (kW)
array[tint] of var float: el_pin_pvwind;    %power from wind and pv into the electrolyser (kW)
array[tint] of var float: res_hout;   %hydrogen extracted from virtual reserve (kgH/s)
array[tint] of var float: comp1_hflow;    %hydrogen flowing into compressor 1 (kg of H2/s)
array[tint] of var float: comp1_pin;  %power into compressor 1 (kW)
array[tint] of var float: comp2_pin;  %power into compressor 2 (kW)
array[tint] of var float: el_pin;    %power flow into the electrolyser (kW)
array[tint] of var float: bat_pin;      %power flow into the battery (kW)
array[tint] of var float: bat_pout;     %power flow out of the battery (kW)
array[tint] of var float: comp2_hflow; %hydrogen transfer from pipeline to underground storage (kg/s)
array[tint] of var float: pipe_storage_hout;  %hydrogen flow from the pipe storage to the load (kg of H2/s)
array[tint] of var float: ug_storage_hout; %discharge from underground storage (kg of H2/s)
array[tsamp] of var float: ug_storage_level;   %stored hydrogen level in underground storage (kg)
array[tsamp] of var float: pipe_storage_level;   %stored hydrogen level in pieplie (kg)
array[tsamp] of var float: res_h_level;    %reserved hydrogen for load shut down (kg)
array[tsamp] of var float: bat_e;  %electrical energy stored in the battery (kWh)


OF = (C_PV + OM_PV/crf) * pv_max + (C_WIND + OM_WIND/crf) * wind_max + (C_EL + OM_EL/crf) * el_max + (C_UG_STORAGE + OM_UG/crf) * ug_storage_capa + C_PIPE_STORAGE * pipe_storage_capa + C_BAT_ENERGY * bat_e_capa + C_BAT_POWER * bat_p_max + C_trans + C_pipe;

%=== CONSTRAINTS ===
constraint capex = C_PV * pv_max + C_WIND * wind_max + C_EL * el_max + C_UG_STORAGE * ug_storage_capa + C_PIPE_STORAGE * pipe_storage_capa + C_BAT_ENERGY * bat_e_capa + C_BAT_POWER * bat_p_max + C_trans + C_pipe;
constraint FOM_PV = pv_max * OM_PV; 
constraint FOM_WIND = wind_max * OM_WIND; 
constraint FOM_EL = el_max * OM_EL; 
constraint FOM_UG = ug_storage_capa * OM_UG;
constraint lcoh = (crf * capex + FOM_PV + FOM_WIND + FOM_EL + FOM_UG)/H_total;
constraint res_h_level[1] = RES_H_CAPA;
constraint ug_storage_level[1] = ug_storage_level[N];
constraint pipe_storage_level[1] = pipe_storage_level[N];
constraint bat_e[1] = bat_e[N];
constraint pv_max = sum(j in N_PV)(pv_max_array[j]);
constraint wind_max = sum(j in N_wind)(wind_max_array[j]);
constraint el_max >= 0;
constraint ug_storage_capa >= 0;
constraint ug_storage_capa <= UG_STORAGE_CAPA_MAX;
constraint pipe_storage_capa >= PIPE_STORAGE_CAPA_MIN;
constraint bat_e_capa >= 0;

%constraint C_trans = sum(j in N_PV)(C_PV_t[j]*pv_max_array[j]) + sum(j in N_wind)(C_wind_t[j]*wind_max_array[j]);
constraint C_trans = sum(j in N_PV, k in N_el) (baseCostPV * distancePV[j, k] * pv_max_array[j] * electrolyserAt[k])+sum(j in N_wind, k in N_el) (baseCostwind * distanceWind[j, k] * wind_max_array[j] * electrolyserAt[k]) ;

%constraint forall(j in N_PV) (
%    (pv_max_array[j] >= capacityLevels[1] /\ pv_max_array[j] < capacityLevels[2]) -> 
%        (newcapexTrans[j] = slopesTrans[1] * pv_max_array[j] + interceptsTrans[1])
%);
%constraint forall(j in N_PV) (
%    (pv_max_array[j] >= capacityLevels[2] /\ pv_max_array[j] < capacityLevels[3]) -> 
%        (newcapexTrans[j] = slopesTrans[2] * pv_max_array[j] + interceptsTrans[2])
%);
%constraint forall(j in N_PV) (
%    (pv_max_array[j] >= capacityLevels[3] /\ pv_max_array[j] < capacityLevels[4]) -> 
%        (newcapexTrans[j] = slopesTrans[3] * pv_max_array[j] + interceptsTrans[3])
%);
%constraint forall(j in N_PV) (
%    (pv_max_array[j] >= capacityLevels[4] /\ pv_max_array[j] < capacityLevels[5]) -> 
%        (newcapexTrans[j] = slopesTrans[4] * pv_max_array[j] + interceptsTrans[4])
%);
%constraint forall(j in N_PV) (
%    (pv_max_array[j] >= capacityLevels[5]) -> 
%        (newcapexTrans[j] = capexValues[5])
%);


%constraint forall(  j in N_PV) (newcapexTrans [j] >=0);

%constraint C_trans = sum(j in N_PV, k in N_el) (newcapexTrans [j] * distancePV[j, k]* electrolyserAt[k]);

constraint sum(electrolyserAt) = 1;
constraint pv_max>=pv_max_min;
constraint forall(  j in N_PV  )(  pv_max_array[j] >=0 );
constraint forall(  j in N_wind  )(  wind_max_array[j] >=0 );
constraint forall(  j in N_wind  )(  wind_max_array[j]/1e3/5.2 + pv_max_array[j]/1e3/29.5 <= Area[j] );
constraint forall(  i in tint  )(  pv_pout[i] = sum(j in N_PV)(pv_max_array[j]/PV_REF * PV_REF_POUT[j,i]) );
constraint forall(  i in tint  )(  wind_pout[i] = sum(j in N_wind)(wind_max_array[j]/WIND_REF * WIND_REF_POUT[j,i]) );
constraint forall(  i in tint  )(  pv_pout[i] + wind_pout[i] - curtail_p[i] - el_pin_pvwind[i] - bat_pin[i] = 0  );
constraint forall(  i in tint  )(  curtail_p[i] >= 0  );

constraint forall(  i in tint  )(  el_pin[i] = el_pin_pvwind[i] + bat_pout[i] - comp1_pin[i] - comp2_pin[i] );

constraint forall(  i in tint  )(  bat_pin[i] >= 0 );
constraint forall(  i in tint  )(  bat_pin[i] - bat_p_max <= 0 );

constraint forall(  i in tint  )(  bat_pout[i] >= 0 );
constraint forall(  i in tint  )(  bat_pout[i] - bat_p_max <= 0 );
constraint forall(  i in tint  )(  el_pin[i] >= 0  );
constraint forall(  i in tint  )(  el_pin_pvwind[i] >= 0  );
constraint forall(  i in tint  )(  el_pin_pvwind[i] + bat_pout[i] - comp1_pin[i] - comp2_pin[i] - el_max <= 0  );

constraint forall(  i in tint  )(  bat_e[i+1] = bat_e[i] + ( bat_pin[i] * BAT_ETA_in - bat_pout[i]/BAT_ETA_out ) * DT  );
constraint forall(  i in tsamp  )(  bat_e[i] >= 0 );
constraint forall(  i in tsamp  )(  bat_e[i] - bat_e_capa <= 0 );  

constraint forall(  i in tsamp  )(  ug_storage_level[i] >= 0  );
constraint forall(  i in tsamp  )(  ug_storage_level[i] - ug_storage_capa <= 0  );

constraint forall(  i in tsamp  )(  pipe_storage_level[i] >= 0  );
constraint forall(  i in tsamp  )(  pipe_storage_level[i] - pipe_storage_capa <= 0  );

constraint forall(  i in tint  )(   comp1_pin[i] = comp1_hflow[i] * 0.83 * 3600  );
constraint forall(  i in tint  )(   comp2_pin[i] = comp2_hflow[i] * 0.41 * 3600  );

constraint forall(  i in tint  )(   comp1_hflow[i] = el_pin[i]/3600* EL_ETA/ 39.4 );  %% high calorific value of H2 = 39.4 kWh/kg
constraint forall(  i in tint  )(   comp2_hflow[i] >= 0  );
constraint forall(  i in tint  )(   comp2_hflow[i] <= el_max/3600* EL_ETA/ 39.4  );

constraint forall(  i in tint  )(   (comp2_hflow[i] + ug_storage_hout[i] )*DT*3600 <= ug_storage_capa );
constraint forall(  i in tint  )(   ug_storage_level[i+1] = ug_storage_level[i] + (comp2_hflow[i] - ug_storage_hout[i] )*DT*3600  );
constraint forall(  i in tint  )(   pipe_storage_level[i+1] = pipe_storage_level[i] + (comp1_hflow[i] - pipe_storage_hout[i] - comp2_hflow[i]) *DT*3600  );

constraint forall(  i in tint  )(   pipe_storage_hout[i] + ug_storage_hout[i] + res_hout[i] = LOAD[i]  );

constraint forall(  i in tint  )(  pipe_storage_hout[i] >= 0  );
constraint forall(  i in tint  )(  ug_storage_hout[i] >= 0  );

constraint forall(  i in tsamp  )(  res_h_level[i] >= 0  );
constraint forall(  i in tsamp  )(  res_h_level[i] <= RES_H_CAPA  );
constraint forall(  i in tint  )(  res_h_level[i+1] = res_h_level[i] - res_hout[i]*DT*3600  );
constraint forall(  i in tint  )(  res_hout[i] >= 0  );
constraint forall(  i in tint  )(  res_hout[i] <= LOAD[i]  );

solve minimize OF;

output  ["!"] ++
        ["N="] ++ [show(N)] ++ [";"] ++
        ["CAPEX="] ++ [show(capex)] ++ [";"] ++
        ["pv_max="] ++ [show(pv_max)] ++ [";"] ++
        ["wind_max="] ++ [show(wind_max)] ++ [";"] ++
        ["pv_max_array="] ++ [show(pv_max_array)] ++ [";"] ++
        ["wind_max_array="] ++ [show(wind_max_array)] ++ [";"] ++
        ["el_max="] ++ [show(el_max)] ++ [";"] ++
        ["ug_storage_capa="] ++ [show(ug_storage_capa)] ++ [";"]++
        ["pipe_storage_capa="] ++ [show(pipe_storage_capa)] ++ [";"]++
        ["bat_e_capa="] ++ [show(bat_e_capa)] ++ [";"]++
        ["bat_p_max="] ++ [show(bat_p_max)] ++ [";"]++
        ["pv_pout="] ++ [show(pv_pout)] ++ [";"]++
        ["wind_pout="] ++ [show(wind_pout)] ++ [";"]++
        ["curtail_p="] ++ [show(curtail_p)] ++ [";"] ++
        ["bat_pin="] ++ [show(bat_pin)] ++ [";"] ++
        ["bat_pout="] ++ [show(bat_pout)] ++ [";"] ++
        ["el_pin="] ++ [show(el_pin)] ++ [";"] ++
        ["comp1_hflow="] ++ [show(comp1_hflow)] ++ [";"] ++
        ["comp1_pin="] ++ [show(comp1_pin)] ++ [";"] ++
        ["comp2_hflow="] ++ [show(comp2_hflow)] ++ [";"] ++
        ["comp2_pin="] ++ [show(comp2_pin)] ++ [";"] ++
        ["res_hout="] ++ [show(res_hout)] ++ [";"] ++
        ["el_pin_pvwind="] ++ [show(el_pin_pvwind)] ++ [";"] ++
        ["pipe_storage_hout="] ++ [show(pipe_storage_hout)] ++ [";"] ++
        ["ug_storage_hout="] ++ [show(ug_storage_hout)] ++ [";"] ++
        ["ug_storage_level="] ++ [show(ug_storage_level)] ++ [";"] ++
        ["pipe_storage_level="] ++ [show(pipe_storage_level)] ++ [";"] ++
        ["reserve_h_level="] ++ [show(res_h_level)] ++ [";"] ++
        ["bat_e="] ++ [show(bat_e)] ++ [";"] ++
        ["LOAD="] ++ [show(LOAD)] ++ [";"] ++
        ["C_trans="] ++ [show(C_trans)] ++ [";"] ++
        ["C_pipe="] ++ [show(C_pipe)] ++ [";"] ++
        ["lcoh="] ++ [show(lcoh)] ++ [";"] ++
        ["FOM_PV="] ++ [show(FOM_PV)] ++ [";"] ++
        ["FOM_WIND="] ++ [show(FOM_WIND)] ++ [";"] ++
        ["FOM_EL="] ++ [show(FOM_EL)] ++ [";"] ++
        ["FOM_UG="] ++ [show(FOM_UG)] ++ [";"] ++
        ["H_total="] ++ [show(H_total)] ++ [";"] ++
        ["El_location="] ++ [show(k) | k in N_el where fix(electrolyserAt[k]) = true] ++ [";"] ++
	      %["El_location: "] ++ [show(electrolyserAt)] ++ [";"] ++
        ["!"];

